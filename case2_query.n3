@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix tr: <http://rdf.org/trace#> .
@prefix p2: <http://ocel2.org/p2p#> .

{
    ?object log:equalTo p2:purchase_requisition:0:pr_trigger_0 .
    # ?object a p2:purchase_requisition .

    ( ?result
        {   ( ?object 
                    ( 'path'
                        (
                            ( 'step' '=>' "Quotation of PR" ) 
                            ( 'step' '=>' "Purchase Order of Quotation" ) 
                            ( 'alt' 
                                (
                                    ( 'step' '=>' "Invoice Receipts of Purchase Order" )
                                    ( 'step' '=>' "order_pm" )
                                    ( 'step' '<=' "Good Receipts of Purchase Order" )
                                )
                            )
                        )
                    )
            ) tr:objectNode ( ( ?object ) ?result ) }
    ?all ) log:collectAllIn _:t .

    ?all!list:append list:unique ?objs .

    ?object log:skolem ?trace .

    ( ( ?evt ?ts )
        {
            ?obj2 list:in ?objs .
            [] a tr:E2O ; tr:object ?obj2 ; tr:event ?evt .
            ?evt tr:ts ?ts .
        }
    ?evts) log:collectAllIn _:t .

    ?evts list:unique ?uevts .
    ?uevts list:sortOn ?sevts .

    ?sevts list:iterate (?i ?evt ) .
    ( ?i 1 ) math:sum ?j .
    ?sevts!list:length math:greaterThan ?j .
    ( ?sevts ?j ) list:memberAt ?evt2 .

} => {
    # ?object :object_set ?uall
    [ 
        tr:in ?trace ;
        # tr:case_obj ?object ;
        tr:from ?evt ; 
        tr:to ?evt2 ;
    ]
} .


# {
#     ?object log:equalTo p2:a .
#     ( ?object 
#             (  'path'
#                 ( 
#                     ( 'step' '=>' "ab" ) 
#                     ( 'alt' 
#                         (
#                             ( 'step' '=>' "bc" ) 
#                             ( 'step' '=>' "bd" )
#                             ( 'step' '=>' "be" )
#                             ( 'path' 
#                                 (
#                                     ( 'step' '<=' "yb" )
#                                     ( 'step' '<=' "xy" )
#                                 )
#                             )
#                         )
#                     )
#                 )
#             )
#     ) tr:objectNode ( () ?result ) .

#     ( ?result ( ?object ) ) list:append ?result2
# } => {
#     [] :waffles ?result2
# } .