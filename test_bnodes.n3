# @alsoload log-bnodes.rdf

@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
@prefix tr: <http://notation3.org/trace#> .
PREFIX : <http://example.org#>

# a given activity precedes another given activity
# a.k.a. "ExistCausal", "ExistTotalCausal"

# trace:activityPrecededByActivity
# {
#     ( :a1 ?t ) tr:precedes ( :a3 ?t () )
# } => {
#     <> tr:match ?t
# } .

# a given activity is not preceded by another given activity

# trace:activityIsNotPrecededByActivity
{
    ?x tr:in ?t .
    (?t
        {
            ( :a1 ?t ) tr:precedes ( :a3 ?t () )
        }
    ()) log:collectAllIn _:t .

} => {
    <> tr:match ?t
} .

# a given activity occurs and is not preceded by another given activity

# trace:activityOccursAndNotPrecededByActivity
# {
#     [ tr:from :a3 ] tr:in ?t .
#     (?t
#         {
#             ( :a1 ?t ) tr:precedes ( :a3 ?t () )
#         }
#     ()) log:collectAllIn _:t .

# } => {
#     <> tr:match ?t
# } .

# a given activity _always_ precedes a given activity
# and, precedes it at least once

# trace:activityPrecededByNeverPrecedingActivity
# {
#     ( :a1 ?t ) tr:precedes ( :a3 ?t () ) .
#     (?t
#         {
#             ( :a3 ?t ) tr:precedes ( :a1 ?t () )
#         }
#     ()) log:collectAllIn _:t .

# } => {
#     <> tr:match ?t
# } .



# helper rules

{
    (?a1 ?t) tr:precedes (?a2 ?t ?visited)
} <= {
    [ tr:from ?a1 ; tr:to ?ai ] tr:in ?t .
    # avoid infinite loops
    (?v { ?a1 list:in ?visited } ()) log:collectAllIn _:t .
    ( ( ?a1 )  ?visited ) list:append ?visited2 .
    (?ai ?t) tr:precedes (?a2 ?t ?visited2 ) .
} .

{
    (?a ?t) tr:precedes (?a ?t ?visited)
} <= {} .